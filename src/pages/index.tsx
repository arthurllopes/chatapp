import type { NextPage } from 'next'
import Head from 'next/head'
import '../services/firebase'
import React from 'react';
import { Container, Header, IconsButton, SearchArea } from './style'
import {Avatar, IconButton, Button} from '@material-ui/core';
import SearchIcon from '@material-ui/icons/Search';
import MoreVertIcon from '@material-ui/icons/MoreVert'
import ChatIcon from '@material-ui/icons/Chat'
import * as EmailValidator from 'email-validator'
import {useAuthState} from "react-firebase-hooks/auth"
import {useCollection} from "react-firebase-hooks/firestore"

import { signOut } from "firebase/auth";
import { auth, db } from '../services/firebase';
import { collection, addDoc, getDocs, query, where } from "firebase/firestore";
import UserChatBox from '../components/UserChatBox';


const Home: NextPage = () => {
  //getting user logged
  const [user] = useAuthState(auth)
  
  //getting all docs at Chats collection that on prop 'users' contains on the array the logged user email
  const userChatRef = query(collection(db, 'chats'), where('users', 'array-contains', user?.email))
  
  //react-firebase-hook to store all the docs in an collection. Needs to pass a ref
  const [chatSnapShots] = useCollection(userChatRef)

  async function handleSignOut () {
    signOut(auth)
  }

  //checkin if chat with given email already exists
  const chatExist = async (email: string) => {
    //gettin the docs
    const querySnapShot = await getDocs(userChatRef)

      //getting each docs to find a chat tht...
      return (
          !!querySnapShot?.docs.find(chat => (
          //... inside its data on prop 'users', trying to find in each user if the email is equal to the given email
          chat.data().users?.find(user => user.email === email)?.length > 0
        ))
      )
    //its returning true or false
  }
  async function startNewChat () {
    const input: any = prompt('Enter an email address you would like to chat with')

    if (EmailValidator.validate(input)  && input !== user?.email) {
      const exist = await chatExist(input)
      if (!exist) {
        //adding docs to the collection of chats, an document that has users which is an array with 2 user
        const docRef = await addDoc(collection(db, "chats"), {
          users: [user?.email, input]
        });
      }
    }
  }
  return (
    <>
      <Head>
        <title>ChatApp</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container>
        <Header>
          <Avatar src={user?.photoURL} onClick={handleSignOut} />
          <IconsButton>
            <IconButton>
              <ChatIcon />
            </IconButton>
            <IconButton>
              <MoreVertIcon />
            </IconButton>
          </IconsButton>
        </Header>
        <SearchArea>
          <SearchIcon />
          <input type="text" placeholder="Search" />
        </SearchArea>
        <Button className="btn" onClick={startNewChat}>
          Start New Chat
        </Button>
        {chatSnapShots?.docs.map((chat) => (
          <UserChatBox key={chat.id} id={chat.id} users={chat.data().users} />
        ))}
      </Container>
    </>
  )
}

export default Home
